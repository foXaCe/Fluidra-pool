#!/usr/bin/env python3
"""Script de diagnostic pour v√©rifier les programmes de l'E30iQ"""
import asyncio
import sys
import logging
from custom_components.fluidra_pool.fluidra_api import FluidraAPI

logging.basicConfig(level=logging.INFO)
_LOGGER = logging.getLogger(__name__)

async def main():
    """Test de r√©cup√©ration des programmes"""
    # Utiliser les identifiants stock√©s
    api = FluidraAPI()

    try:
        # Authentification
        _LOGGER.info("üîê Connexion √† l'API Fluidra...")
        success = await api.authenticate()
        if not success:
            _LOGGER.error("‚ùå √âchec de l'authentification")
            return

        _LOGGER.info("‚úÖ Authentification r√©ussie")

        # R√©cup√©rer les pools
        pools = await api.get_pools()
        _LOGGER.info(f"üìã {len(pools)} piscine(s) trouv√©e(s)")

        # Pour chaque appareil E30iQ
        for pool in pools:
            pool_id = pool.get("id")
            _LOGGER.info(f"\nüèä Piscine: {pool.get('name', pool_id)}")

            for device in pool.get("devices", []):
                device_id = device.get("device_id")
                device_name = device.get("name", device_id)
                device_type = device.get("type", "")

                # Filtrer uniquement les pompes E30iQ
                if "pump" in device_type.lower() and device_type != "heat pump":
                    _LOGGER.info(f"\n  üì± Appareil: {device_name} ({device_id})")

                    # V√©rifier si les donn√©es de programme sont pr√©sentes
                    schedule_data = device.get("schedule_data")
                    if schedule_data is None:
                        _LOGGER.warning(f"    ‚ö†Ô∏è PROBL√àME: Aucune donn√©e 'schedule_data' trouv√©e")
                        _LOGGER.info(f"    üîç Tentative de r√©cup√©ration directe du component 20...")

                        # Essayer de r√©cup√©rer directement le component 20
                        comp_state = await api.get_device_component_state(device_id, 20)
                        if comp_state:
                            _LOGGER.info(f"    ‚úÖ Component 20 r√©cup√©r√©: {comp_state}")
                            reported_value = comp_state.get("reportedValue", [])
                            _LOGGER.info(f"    üìä Nombre de programmes: {len(reported_value)}")

                            for i, schedule in enumerate(reported_value, 1):
                                enabled = schedule.get("enabled", False)
                                start_time = schedule.get("startTime", "")
                                end_time = schedule.get("endTime", "")
                                status = "‚úÖ Actif" if enabled else "‚ùå Inactif"
                                _LOGGER.info(f"      Programme {i} {status}: {start_time} ‚Üí {end_time}")
                        else:
                            _LOGGER.error(f"    ‚ùå Impossible de r√©cup√©rer le component 20")
                    else:
                        _LOGGER.info(f"    ‚úÖ {len(schedule_data)} programme(s) trouv√©(s)")

                        # Afficher les d√©tails de chaque programme
                        for schedule in schedule_data:
                            schedule_id = schedule.get("id")
                            enabled = schedule.get("enabled", False)
                            start_time = schedule.get("startTime", "")
                            end_time = schedule.get("endTime", "")
                            status = "‚úÖ Actif" if enabled else "‚ùå Inactif"
                            _LOGGER.info(f"      Programme {schedule_id} {status}: {start_time} ‚Üí {end_time}")

        _LOGGER.info("\n‚úÖ Diagnostic termin√©")

    except Exception as e:
        _LOGGER.error(f"‚ùå Erreur: {e}", exc_info=True)
    finally:
        await api.close()

if __name__ == "__main__":
    asyncio.run(main())